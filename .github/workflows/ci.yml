name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            infra/package-lock.json

      - name: Install app dependencies
        run: |
          cd app
          npm ci

      - name: Install infra dependencies
        run: |
          cd infra
          npm ci

      - name: Run type checking
        run: |
          cd app
          npm run type-check

      - name: Run linting
        run: |
          cd app
          npm run lint

      - name: Run unit tests
        run: |
          cd app
          npm run test:unit

      - name: Build application
        run: |
          cd app
          npm run build

      - name: Run Playwright tests
        run: |
          cd app
          npx playwright install --with-deps
          npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            app/test-results/
            app/playwright-report/

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Build application
        run: |
          cd app
          npm run build

      - name: Start application
        run: |
          cd app
          npm start &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          cd app
          npx @lhci/cli@0.12.x autorun

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, lighthouse]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        run: |
          cd infra
          npm ci

      - name: Bootstrap CDK
        run: |
          cd infra
          npx cdk bootstrap

      - name: Deploy infrastructure
        run: |
          cd infra
          npx cdk deploy --require-approval never

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy-infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Build application
        run: |
          cd app
          npm run build

      - name: Deploy to Amplify
        uses: aws-actions/amplify-deploy@v1
        with:
          app-id: ${{ secrets.AMPLIFY_APP_ID }}
          branch: main
          artifacts: app/.next

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
